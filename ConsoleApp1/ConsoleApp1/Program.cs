
/* 
    Шейбак Дарья, гр3 курс 2, ИСИТ
    
    1) К предыдущей лабораторной работе (л.р. 5) добавьте к существующим классам перечисление и структуру. 
    2) Один из классов сделайте partial и разместите его в разных файлах. 
    3) Определить класс-Контейнер (указан в вариантах жирным шрифтом) для хранения разных типов объектов (в пределах иерархии) в виде списка или массива (использовать абстрактный тип данных). 
       Класс-контейнер должен содержать методы get и set для управления списком/массивом, методы для добавления и удаления объектов в список/массив, метод для вывода списка на консоль. 
    4) Определить управляющий класс-Контроллер, который управляет объектом- Контейнером и реализовать в нем запросы по варианту. 
       При необходимости используйте стандартные интерфейсы (IComparable, ICloneable,….)

    Т Е О Р И Я :

    JSON — это формат, который хранит структурированную информацию и в основном используется для передачи данных между сервером и клиентом. 
    Файл JSON представляет собой более простую и лёгкую альтернативу расширению с аналогичными функциями XML (Extensive Markup Language).

       Мы определили следующую иерархию и композицию классов - схема :
 
    [Персона]                                        Счет                                 Операции со счетом     Платежная карта
    ThePerson                                       Account                                   AccOpers              PayCard
        |                 ____________________________|____________________________                                    |
     Клиент  [  Адрес     Накопительный      Валютный      Расчетный          Общий                         Дебетовая      Кредитная     ]
   TheClient   Address  AccountCumulative AccountCurrency AccountSettlement AccountTotal                  PayCardDebet   PayCardCredit                                                                          
                                                                                                                             
                                                         
                                                   
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {

            // создадим на основе нашей иерархии классов Банк

            Bank TheBank = new Bank();

            TheBank.Add( new TheClient( "Шейбак Дарья", 18, 'f',
                                       "Минск", "Мирошниченко", 9, 202,
                                       "017496578246", 112.31, 12,
                                       "057570295667", 6784, "GBP",
                                       "2957905752097", 4325, "ЗАО Мирамакс", // пусть клиент еще и учредитель юр.лица
                                       "2957905752097", 442424, 2,
                                       "2342-45622-2535", "4244", 57,
                                       "2480-242454-445", "3134", 2000 ));

            TheBank.Add(new TheClient( "Эмили Уотсон", 22, 'f',
                                       "Минск", "Мястровская", 12, 69,
                                       "017496578246", 112.31, 12,
                                       "057570295667", 6784, "EUR",
                                       "2957905752097", 4325, "ЗАО Бешезда", // пусть клиент еще и учредитель юр.лица
                                       "2957905752097", 442424, 2,
                                       "2342-45622-2535", "4244", 57,
                                       "2480-242454-445", "3134", 2000));

            TheBank.Add(new TheClient( "Грэм Грин", 67, 'm',
                                       "Минск", "Алой Розы", 3, 17,
                                       "017496578246", 112.31, 12,
                                       "057570295667", 6784, "USD",
                                       "2957905752097", 4325, "ОАО Гаванна", // пусть клиент еще и учредитель юр.лица
                                       "2957905752097", 442424, 2,
                                       "2342-45622-2535", "4244", 57,
                                       "2480-242454-445", "3134", 2000));

            TheBank.PrintPersons();

            Console.WriteLine("\nУдалим данные клиентов Эмили Уотсон и Грэм Грин из банковского реестра");

            TheBank.Remove("Эмили Уотсон");
            TheBank.Remove("Грэм Грин");   
  
            TheBank.PrintPersons();

            Console.WriteLine("\nПродемонстрируем работу метода set() управления списком персоналий");
            TheBank.PersonRegistry = new TheClient("Маофен Дюга", 41, 'm',
                                       "Минск", "Трех Поросят", 3, 17,
                                       "017496578246", 112.31, 12,
                                       "057570295667", 6784, "USD",
                                       "2957905752097", 4325, "ОАО Гордерея", // пусть клиент еще и учредитель юр.лица
                                       "2957905752097", 442424, 2,
                                       "2342-45622-2535", "4244", 57,
                                       "2480-242454-445", "3134", 2000);

            TheBank.PrintPersons();

            Console.WriteLine("\nПродемонстрируем работу класса-Контроллера нашего Банка - попытаемся найти счет 2957905752097");
            BankController.SearchAccount(TheBank, "2957905752097");
            Console.WriteLine("\nПродемонстрируем работу класса-Контроллера нашего Банка - отсортируем счета реестра клиентов");
            BankController.SortAccounts(TheBank);
            Console.WriteLine("\nПродемонстрируем работу класса-Контроллера нашего Банка - выведем на консоль общую сумму по незаблокированным счетам клиента Шейбак Дарья");
            BankController.ClientAmount(TheBank, "Шейбак Дарья");
            Console.WriteLine("\nПродемонстрируем работу класса-Контроллера нашего Банка - выведем отдельно суммы по всем счетам, имеющим положительный и отрицательный балансы");
            BankController.AccAmount(TheBank);
            Console.WriteLine("\nПродемонстрируем работу класса-Контроллера нашего Банка - инициализируем реестр клиентов банка данными из текстового файла");
            TheBank.Remove("Маофен Дюга");
            TheBank.Remove("Шейбак Дарья"); 
            // теперь реестр пуст - проинициализируем его из обычного текстового файла
            BankController.LoadFromTEXTFile(TheBank, "CLIENTS.TXT");
            TheBank.PrintPersons();
            TheBank.Remove("Иван Петрович Файловый");
            // теперь реестр пуст - проинициализируем его из JSON-файла
            Console.WriteLine("\nПродемонстрируем работу класса-Контроллера нашего Банка - инициализируем реестр клиентов банка данными из JSON файла");
            BankController.LoadFromJSONFile(TheBank, "CLIENTS.JSON");

            TheBank.PrintPersons();


            Console.ReadKey();
        }
    }
}
